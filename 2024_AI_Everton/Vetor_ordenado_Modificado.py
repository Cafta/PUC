# -*- coding: utf-8 -*-
"""Vetor_ordenado_Prof_Everton.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Cafta/PUC/blob/main/2024_AI_Everton/Vetor_ordenado_Prof_Everton.ipynb

# Laboratório de IA - PUCC - Eng. De Controle e Automação 1sem2024
Código Apresentado pelo Prof.Everton no dia 19/04/2024 e modificado pelo grupo para incluir alteração dinâmica de tamanho do vetor. Aula sobre introdução sobre teorias de busca, algoritmos de jogos e GPS. Abordando tópicos como Heurística de Jogos, Custos de Solução, Busca com ou sem informação, Busca Gulosa, e Organização de Resultados ordenada e desordenada.

# Vetor ordenado
"""

import numpy as np

class VetorOrdenado:

  def __init__(self, capacidade):
    self.__capacidade = capacidade
    self.__ultima_posicao = -1
    self.__valores = np.empty(self.__capacidade, dtype=int)

  # O(n)
  def imprime(self):
    if self.__ultima_posicao == -1:
      print('O vetor está vazio')
    else:
      for i in range(self.__ultima_posicao + 1):
        print(i, ' - ', self.__valores[i])

  # O(n)
  def insere(self, valor):
    if self.__ultima_posicao == self.__capacidade - 1:
      print('Capacidade máxima atingida')
      return

    posicao = 0
    for i in range(self.__ultima_posicao + 1):
      posicao = i
      if self.__valores[i] > valor:
        break
      if i == self.__ultima_posicao:
        posicao = i + 1

    x = self.__ultima_posicao
    while x >= posicao:
      self.__valores[x + 1] = self.__valores[x]
      x -= 1

    self.__valores[posicao] = valor
    self.__ultima_posicao += 1

  # O(n)
  def setTamanho(self, novoTamanho):
    if self.__ultima_posicao+1 > novoTamanho:
      print('Não posso mudar para este tamanho, pois o vetor existente está mais cheio que isso.')
    else:
      self.__capacidade = novoTamanho
      self.__valores = np.resize(self.__valores, (novoTamanho,))

  # O(n)
  def getTamanho(self):
    print('O tamanho do vetor é de ', self.__capacidade, '\nE está ', (self.__ultima_posicao+1)/self.__capacidade*100, '% cheio')

vetor = VetorOrdenado(2)
vetor.imprime()

vetor.insere(6)
vetor.imprime()

vetor.insere(4)
vetor.imprime()

vetor.insere(3)
vetor.imprime()

vetor.setTamanho(5)

vetor.insere(3)
vetor.imprime()

vetor.getTamanho()

vetor.insere(5)
vetor.imprime()

vetor.insere(1)
vetor.imprime()

vetor.insere(8)
vetor.imprime()

vetor.getTamanho()