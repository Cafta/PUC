# -*- coding: utf-8 -*-
"""Everton_AI_05.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EY_QwQcy7RL3mWgOEhUJrzQzXOm0vRd1

# Laboratório de IA e Automação

## Laboratórios 05

*André Kimaid* RA:21004050

*Carlos Amaral* RA:21986609

*Guilherme Talman* RA:21010098

*Murilo Trevisan* RA:21986260
"""

import pandas as pd
import numpy as np

"""## Exercício 1 - Resolvido:
Escreva um programa em Python utilizando a biblioteca Pandas para alterar a ordem do índice de uma determinada Serie.


```
Dica: utilize a função reindex da biblioteca
Exemplo:
Series Original:           Series com indice alterado:
A 1                        E 5
B 2                        D 4
C 3                        C 3                        
D 4                        B 2
E 5                        A 1
dtype: int64               dtype: int64

```
"""

import pandas as pd
s= pd.Series(data = [1,2,3,4,5], index =['A','B','C','D','E'])
print ("Series Original:")
print (s)
s= s.reindex(index = ['E','D','C','B','A'])
print ("Series com indice alterado")
print(s)

"""## Exercício 2 - Resolvido:
Escreva um programa em Python utilizando a biblioteca Pandas para criar um subconjunto de uma Serie com base em uma determinada condição.
Dica: não há necessidade de utilizar loop


```
Exemplo:
Series Original:                Subconjunto da Series abaixo de 4:
0 0                             0 0
1 1                             1 1
2 2                             2 2
3 3                             3 3
4 4                             dtype: int64
5 5                             
6 6                             
dtype: int64                    
```


"""

s = pd.Series([0,1,2,3,4,5,6])
print('Serie Original:')
print(s)
n = 4
print('Subconjunto da Series abaixo de {}', format(n))
new_s = s[s < n]
print(new_s)

"""## Exercício 3 - Construir com seu grupo
Escreva um programa em Python utilizando a biblioteca Pandas para selecionar as
colunas 'nome' e 'pontuacao' do seguinte DataFrame.

Utilize o dicionário (data) e a lista (labels) abaixo para criar o DataFrame.


```
data = {'nome': ['Joao', ‘Paulo', 'Guilherme', 'James', 'Emily', 'Michel', 'Matheus', 'Laura', 'Kevin', 'Jonas'],
'pontuacao': [10.5, 7, 13.5, np.nan, 6, 40, 14.5, np.nan, 7, 13],
'tentativas': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
'qualificado': ['sim', 'nao', 'sim', 'nao', 'nao', 'sim', 'sim', 'nao', 'nao', 'sim’]}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
```






"""

data = {'nome': ['Joao', 'Paulo', 'Guilherme', 'James', 'Emily', 'Michel', 'Matheus', 'Laura', 'Kevin', 'Jonas'],
        'pontuacao': [10.5, 7, 13.5, np.nan, 6, 40, 14.5, np.nan, 7, 13],
        'tentativas': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'qualificado': ['sim', 'nao', 'sim', 'nao', 'nao', 'sim', 'sim', 'nao', 'nao', 'sim']}
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

df_exemplo = pd.DataFrame(data, labels)
df_exemplo

df_exemplo[['nome', 'pontuacao']]

"""## Exercício 4 - Praticar
Escreva um programa em Python utilizando a biblioteca Pandas para selecionar as
linhas onde o número de ‘tentativas’ é maior que 2.
Utilize o DataFrame do exercício 3.
"""

df_exemplo[df_exemplo['tentativas'] > 2]

"""## EXERCÍCIO 5 - Praticar:
Exercício 05: Extrair dados a partir de uma tabela de on-line.

I. Para isso acesse o site:covid.saude.gov.br Arquivo CSV;

II. E após efetuar o download, procure pelo arquivo: HIST_PAINEL_COVIDBR_2020_Parte2_06abr2024;

III. Abra um novo notebook no Google Colaboratory e carreggue a planilha do item anterior;

IV. Imprima todo o Data Frame Covid presente na planilha;

V. Imprima a partir do Data Frame Covid com a ordem dos Estados Brasileiros mais populosos (do maior para o menor).
"""

# O seguinte código deu erro... ao investigar notamos que ele é separado por ; ao invés de ,
# df_covid = pd.read_csv('/content/HIST_PAINEL_COVIDBR_2020_Parte2_06abr2024.csv')

# Para corrigir utilizamo o parâmetro 'delimiter':
df_covid = pd.read_csv('/content/HIST_PAINEL_COVIDBR_2020_Parte2_06abr2024.csv', delimiter=';', encoding='latin1')

# Item IV. Imprimindo o dataframe todo (devido ao tamanho vamos mostrar apenas o início e o fim dele)
df_covid

# Item V
# Temos que descobrir a ordem dos estados mais populosos. Este dado não traz essa informação.
# Ele fala da população do município, mas os municípios se repetem em várias linhas, de forma que não
# podemos simplesmente somar a população por estados.
# Vamos considerar que todos os municípios estão com o nome digitado corretamente, vamos retirar as duplicações
df_geo = df_covid[['regiao', 'estado', 'municipio', 'populacaoTCU2019']][df_covid['estado'].notna() & df_covid['municipio'].notna()]
df_geo = df_geo.drop_duplicates(subset='municipio', keep='last')
df_estados = df_geo.groupby('estado').agg(regiao=('regiao', 'first'), populacao=('populacaoTCU2019', 'sum'))
df_estados = df_estados.sort_values(by='populacao', ascending=False)  # Ordenando do estado mais populoso para mo menos

# Se quiser visualizar como ficou o DataFrame dos estados:
df_estados

# Agora que já sabemos a ordem de estados mais populosos podemos reorganizar o df_covid
df_covid_ordenado = df_covid.set_index('estado').loc[df_estados.index].reset_index()
df_covid_ordenado