# -*- coding: utf-8 -*-
"""Everton_AI_01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16ZF_57CStjkycA1zJeckEwNCXkPd29GL
"""

import time

"""## Exercício 1
Escreva um programa python que faz a conversão de temperaturas de Celsius para Fahrenheit, a partir de uma entrada do teclado.

"""

def converter(a):
  return ((9*a)/5)+32

def eNumero(numero):
  if (type(numero) == int):
    return True

def carregando():
  for i in range(3):
    print(".", end="", flush=True)
    time.sleep(1)

numero=int(input("Qual é o número que você deseja converter? "))
if (eNumero(numero)):
  print("Essa é difícil... convertendo", end="")
  carregando()
  print("\nConvertendo " + str(numero) + " oC em Fahrenheit, temos: " + str(converter(numero)))

"""## Exercício 2:
Escreva um programa Python que calcula o mínimo múltiplo comum (mmc) entre dois
números inteiros dados a partir do teclado.
Para resolver este problema utilizamos a fórmula mmc=a*b/mdc
"""

def mdc(a, b):
  while b != 0:
    a, b = b, a % b
  return a

def mmc(a, b):
  if not isinstance(a, int) or not isinstance(b, int):
    print('\nInsira um número inteiro\n')
    return
  return (a * b)/mdc(a,b)

a = int(input('Digite o primeiro número inteiro:'))
b = int(input('Digite o segundo número inteiro:'))
print(f'O MMC dos números digitados é: {mmc(a, b)}')

"""## Exercício 3:
Escreva um programa Python que verifica se um número inteiro dado a partir do
teclado é primo.
Lembrando - um número inteiro maior que 1 é primo quando só é divisível por 1 e por
ele mesmo. O primeiro primo é o 2
"""

def ePrimo(a):
  if a == 2:
    return True;
  if a < 2:
    return False;
  for i in range(2,a):
    if (a%i == 0):
      return False;
  return True;

a = int(input('Digite o primeiro número inteiro:'))
if ePrimo(a):
  print('Este número é primo!')
else:
  print('Este número não é primo!')

"""## Exercício 4:
Escreva um programa Python que “desenha” na saída o seguinte padrão abaixo.

```
*
**
***
****
*****
****
***
**
*
```




"""

nColunas = 5
for i in range(1, nColunas+1): # linhas
  print('*' * i)
for i in range(nColunas+1, 0, -1): # linhas
  print('*' * i)